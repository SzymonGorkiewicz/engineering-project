name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.2.0'
      
      - name: Set up PostgreSQL service
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "CREATE DATABASE engineering_project;"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Install dependencies 
        run: pnpm install
        
      - name: Run OWASP dependency check
        if: steps.owasp-cache.outputs.cache-hit != 'true'
        env:
          NVD_KEY: ${{ secrets.NVD_KEY }}
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip
          unzip dependency-check-10.0.2-release.zip
          ./dependency-check/bin/dependency-check.sh \
          --project "engineering-project" \
          --scan ./pnpm-lock.yaml \
          --scan ./apps/frontend/package.json \
          --scan ./apps/backend/package.json \
          --out ./dependency-check-reports \
          --format HTML \
          --nvdApiKey $NVD_KEY
          
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-reports  

      - name: Run linter (Frontend)
        working-directory: ./apps/frontend
        run: pnpm run lint

      # - name: Run linter (Backend)
      #   working-directory: ./apps/backend
      #   run: pnpm run lint

      # - name: Run TypeScript check (Frontend)
      #   working-directory: ./apps/frontend
      #   run: pnpm exec tsc --noEmit

      # - name: Run TypeScript check (Backend)
      #   working-directory: ./apps/backend
      #   run: pnpm exec tsc --noEmit

      - name: Build Next.js app
        working-directory: ./apps/frontend
        run: pnpm run build

      - name: Build NestJS app
        working-directory: ./apps/backend
        run: pnpm run build

      - name: Create .env file for NestJS
        working-directory: ./apps/backend
        run: |
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=engineering_project" >> .env
      
      - name: Create .env file for Nextjs
        working-directory: ./apps/frontend
        run: |
          echo "NEXT_PUBLIC_BACKEND_URL=http://localhost:3000/" >> .env.local
          
      - name: Start NestJS Application
        working-directory: ./apps/backend
        run: pnpm run start:dev &  

      - name: Start Next.js Application
        working-directory: ./apps/frontend
        run: pnpm run dev &  

      - name: Wait for applications to be ready
        run: sleep 30  

      # - name: ZAP Scan
      #   uses: zaproxy/action-full-scan@v0.11.0
      #   with:
      #     target: 'http://localhost:3000/'  # full scan moze trwac kilka godzin
      
      - name: Deploy backend to heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: backend-lifetrack
          HEROKU_EMAIL:  ${{ secrets.HEROKU_EMAIL }}
        working-directory: ./apps/backend
        uses: akhileshns/heroku-deploy@v3.12.12
          with:
            heroku_api_key: $HEROKU_API_KEY
            heroku_app_name: $HEROKU_APP_NAME
            heroku_email: $HEROKU_EMAIL
            #env_file:


      # - name: Deploy frontend to vercel
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     ORG_ID: ${{ secrets.VERCEL_ORGID }}
      #     PROJECT_ID: ${{ secrets.VERCEL.PROJECTID }}
      #   working-directory: ./apps/frontend
      #   run: |
      #     pnpm vercel --token=$VERCEL_TOKEN --prod --confirm 

   
   
