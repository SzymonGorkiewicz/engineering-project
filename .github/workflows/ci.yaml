name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test-locally:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.2.0'
      
      - name: Set up PostgreSQL service
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "CREATE DATABASE engineering_project;"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies 
        run: pnpm install
        
      # - name: Run linter (Frontend)
      #   working-directory: ./apps/frontend
      #   run: pnpm run lint

      # - name: Run linter (Backend)
      #   working-directory: ./apps/backend
      #   run: pnpm run lint
        
      # - name: Run OWASP dependency check
      #   if: steps.owasp-cache.outputs.cache-hit != 'true'
      #   env:
      #     NVD_KEY: ${{ secrets.NVD_KEY }}
      #   run: |
      #     wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip
      #     unzip dependency-check-10.0.2-release.zip
      #     ./dependency-check/bin/dependency-check.sh \
      #     --project "engineering-project" \
      #     --scan ./pnpm-lock.yaml \
      #     --scan ./apps/frontend/package.json \
      #     --scan ./apps/backend/package.json \
      #     --out ./dependency-check-reports \
      #     --format HTML \
      #     --nvdApiKey $NVD_KEY
          
      # - name: Upload Dependency Check Report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dependency-check-report
      #     path: dependency-check-reports  

      # - name: Run TypeScript check (Frontend)
      #   working-directory: ./apps/frontend
      #   run: pnpm exec tsc --noEmit

      # - name: Run TypeScript check (Backend)
      #   working-directory: ./apps/backend
      #   run: pnpm exec tsc --noEmit

      - name: Create .env file for NestJS
        working-directory: ./apps/backend
        run: |
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "POSTGRES_DB=engineering_project" >> .env
      
      - name: Create .env file for Nextjs
        working-directory: ./apps/frontend
        run: |
          echo "NEXT_PUBLIC_BACKEND_URL=http://localhost:3000/" >> .env.local

      - name: Build Next.js app
        working-directory: ./apps/frontend
        run: pnpm run build

      - name: Build NestJS app
        working-directory: ./apps/backend
        run: pnpm run build
          
      - name: Start NestJS Application
        working-directory: ./apps/backend
        run: pnpm run start:prod &  

      - name: Start Next.js Application
        working-directory: ./apps/frontend
        run: pnpm run start &  

      - name: Wait for applications to be ready
        run: sleep 30  

      - name: Check PostgreSQL Tables #wyswietlenie tabel w bazie danych
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          psql -h localhost -U postgres -d engineering_project -c "\dt"
        
      - name: Create test user #Utworzenie testowego usera dla przyszłego zap scana aby móc go zautoryzować
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          psql -h localhost -U postgres -d engineering_project -c "INSERT INTO "user" (name, username, password, email) VALUES ('Test User', 'zapuser', 'Hashedpassword1!', 'zap@example.com');"
        

      - name: ZAP Scan
        uses: zaproxy/action-af@v0.1.0
        with:
          plan: '.github/workflows/zap/plan.yaml'

      # - name: ZAP Scan
      #   uses: zaproxy/action-full-scan@v0.11.0
      #   with:
      #     target: 'http://localhost:3001/register'
      #     allow_issue_writing: false
      #     cmd_options: '-j -J report_json.json -w report_md.md -r report_html.html -z "-config api.disablekey=true -config spider.maxDuration-120 -config spider.maxDepth=3 -config ajaxSpider.maxDepth=3"'


      
  # deploy-backend:
  #   needs: build-and-test-locally
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Deploy backend to Heroku
  #       uses: akhileshns/heroku-deploy@v3.12.12
  #       with:
  #         heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
  #         heroku_app_name: backend-lifetrack
  #         heroku_email: ${{ secrets.HEROKU_EMAIL }}
  #         appdir: "./apps/backend"
  #       env:
  #         HD_POSTGRES_HOST: ${{ secrets.HEROKU_POSTGRES_HOST }}
  #         HD_POSTGRES_PORT: 5432
  #         HD_POSTGRES_USER: ${{ secrets.HEROKU_POSTGRES_USER }}
  #         HD_POSTGRES_PASSWORD: ${{ secrets.HEROKU_POSTGRES_PASSWORD }}
  #         HD_POSTGRES_DB: ${{ secrets.HEROKU_POSTGRES_DB }}
  #         HD_JWT_SECRET: ${{ secrets.JWT_SECRET }}
  #         HD_FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  #         HD_HEROKU_DATABASE_URL: ${{ secrets.HEROKU_DATABASE_URL }}
  #         HD_API_KEY: ${{ secrets.HEROKU_FOOD_API_KEY }}
  #         HD_FOOD_API_URL: ${{ secrets.HEROKU_FOOD_API_URL }}
  
  # deploy-frontend:
  #   needs: deploy-backend
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install pnpm
  #       run: npm install -g pnpm
      
  #     - name: Install dependencies 
  #       run: pnpm install

  #     - name: Create .env file for Nextjs
  #       working-directory: ./apps/frontend
  #       run: |
  #         echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.HEROKU_BACKEND_URL }}" >> .env.local # to nie działa dodac inaczej zmienna do vercela
      
  #     - name: Deploy frontend to vercel
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #         ORG_ID: ${{ secrets.VERCEL_ORGID }}
  #         PROJECT_ID: ${{ secrets.VERCEL.PROJECTID }}
  #       working-directory: ./apps/frontend
  #       run: |
  #         pnpm vercel --token=$VERCEL_TOKEN --prod --yes 
      

   
   
